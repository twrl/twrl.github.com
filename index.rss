<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
	<channel>
		<title>twrl</title>
		<description>Writing about technology, food, LGB topics, and whatever else comes to mind</description>
		<link>http://twrl.github.com</link>
		
			<item>
				<title>The FSF have my goat!</title>
				<description>&lt;p&gt;I&amp;rsquo;ve never made a secret of my mixed feelings about the FSF and what they do. &lt;/p&gt;

&lt;p&gt;For anyone who isn&amp;rsquo;t aware, the UEFI forum have devised a standard called
Secure Boot. Secure Boot requires the firmware to cryptographically verify
operating system images at load time, using public keys stored in NVRAM. The
standard doesn&amp;rsquo;t require it explicitly, but in practice this means using the 
secure keystore and trusted boot path functions of a Trusted Platform Module.&lt;/p&gt;

&lt;p&gt;Microsoft have stated that for hardware manufacturers to recieve Windows 8 logo
certification they must meet certain requirements regarding Secure Boot. Amongst
other things Secure Boot must be fully implemented the user must be able to 
disable Secure Boot on x86 and x86-64 based systems. Meaning that as well as the
UEFI mandated software API for disabling and overriding the behaviour of Secure
Boot, Microsoft have mandated that there must be a user interface. &lt;/p&gt;

&lt;p&gt;The computer, and the vast majority of the world&amp;rsquo;s computers are sold 
preinstalled with Microsoft Windows, must be able to verify that the core of the
operating system is untampered with at boot-time. And the user must be able to
disable this function. These requirements seem thoroughly reasonable, and 
address the spectre of UEFI and Hypervisor malwares.&lt;/p&gt;

&lt;p&gt;So why does the front page of the &lt;a href=&quot;http://www.fsf.org&quot;&gt;FSF website&lt;/a&gt; look like
this:&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;width: 100%&quot; src=&quot;/attachments/2012-09-26-fsf.org-screenshot.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The only explanation I can think of is that the FSF are so invested in the idea
of every development being a Microsoft led conspiracy against freedom that they
can&amp;rsquo;t not spin things like this any more. In fact, anyone who does comply with
Microsofts certification requirements has already met the demands stated in the
FSF petition.&lt;/p&gt;

&lt;p&gt;There are plenty of very legitimate grievances against Microsoft, but this not 
one of them. For the time being, at least, Microsoft&amp;rsquo;s policy seems quite 
reasonable and quite responsible. &lt;/p&gt;

&lt;p&gt;Microsoft has the clout to get it&amp;rsquo;s public keys included in practially every 
firmware, and the corporate world will have no compunction about getting their
certificates signed by Microsoft. Red Hat have announced their intention to do
just that for the Fedora Linux distribution. &lt;/p&gt;

&lt;p&gt;But never in a million years will the FSF let Microsoft sign their certificates,
for ideological reasons. They have already condemned Red Hat for doing so.
The FSF&amp;rsquo;s intentions may be pure, but they&amp;rsquo;re politically very divisive. If the
whole Open Source and Free Software communities were to unite behind the FSF, 
then their keys could well be in every firmware just like Microsoft&amp;rsquo;s. But that
will never happen.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s time to consider the role of the FSF, and whether they now do more harm 
than good for the movement that they once nurtured.&lt;/p&gt;
</description>
				<published>2012-09-26 00:00:00 +0100</published>
				<link>http://twrl.github.com/2012/09/the-fsf-have-my-goat/</link>
			</item>
		
			<item>
				<title>The Processor of my Dreams</title>
				<description>&lt;p&gt;My recent forays into Operating System Development have made me more aware of 
the pros and cons of the x86 processor. It&amp;rsquo;s not all bad.&lt;/p&gt;

&lt;p&gt;It is impressive that software written for the 8086, which was released 35 years
ago, will still run without modification on the latest Intel i7 or AMD A-series.
But it&amp;rsquo;s also a burden, because as anyone who has ever tried to manipulate the
Global Descriptor Table will tell you, holding on to back-compatibility has
led to some hideously fragmented data structures and seemingly nonsense 
behaviour.&lt;/p&gt;

&lt;p&gt;Anyway, this set me to thinking about what features I would like in a processor.
In terms of what I&amp;rsquo;d like to see in a future iteration of the x86, we have:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;128-bit General Purpose registers. Bonus points if it can be initialized
with random data (for UUID generation), and if you can lock the value of the
high n-bits (for working with IPv6 addresses).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Hardware synchronisation primitives. It would be simple to add a circuit
connected to all (logical) cores which allows you to add, test, and remove
an integer from a list of active locks. In multi-chip setups you&amp;rsquo;d need some
sort of memory coherence to keep each chip in sync, but we&amp;rsquo;d be talking 
of quite small amounts of data on fast buses and independent of the main
load-store unit.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Updated configuration and mode selection mechanism. I understand why the x86
has fixed data structures and an array of registers to set it&amp;rsquo;s operating
mode and configuration, but it&amp;rsquo;s a nightmare. There are three million steps
to do anything, most processor features are controlled in fundamentally
different ways, and the BIOS/EFI/Bootloader/etc. may or may not have already
set or unset various things - including some which can&amp;rsquo;t easily be tested
for. By all means keep these things for legacy support. But why not
implement a new, simple, single configuration meachanism. I want to say 
&amp;ldquo;load a 24-byte configuration packet from this address&amp;rdquo; and have the CPU
execute my instructions. You can have variable length packets, make it
arbitrarily extensible. You can even include a query mechanism in the 
protocol and make it bidirectional. &lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now if I were designing a new CPU, there&amp;rsquo;s a few things I&amp;rsquo;d add to this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Seperate call and data stacks. Keeping track of the stack frame is fiddly,
and for low level programming unwinding exceptions is impractical, when you
have a single stack.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Structure mutation area. Why not have a 1024-bit register, into which you 
can load a large data structure? Make it size-aligned subaddressable (so 128 
bytes, or 64 words, or 32 dwords, or 16 qwords, etc). Then you can do 
mutations of that data structure, which because it&amp;rsquo;s a CPU register will be 
very fast and cheap, and flush it back out to main memory once you&amp;rsquo;re done.
For 128 bytes natural aligned it so happens there&amp;rsquo;s a very efficient coding
of all possible size/offset combinations into 1 byte too :)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There&amp;rsquo;s almost certainly more things I could add to this. Mechanisms to enforce
bounds on data structures, to resolve arbitrary identifiers to pointers, and
to fire arbitrary events (interrupts and exceptions being a hardware-defined
subset of &amp;lsquo;event&amp;rsquo;) all spring to mind. Slightly more outlandish, but the ability
to emulate CAM in main memory might be fun (and could underpin several of the
above).&lt;/p&gt;

&lt;p&gt;(Un)fortunately I know very little about CPU microarchitecture, and Verilog 
makes my head hurt, so Intel and AMD are safe from competetion. For now&amp;hellip;&lt;/p&gt;
</description>
				<published>2012-09-21 00:00:00 +0100</published>
				<link>http://twrl.github.com/2012/09/processor-of-my-dreams/</link>
			</item>
		
			<item>
				<title>Operating System Development</title>
				<description>&lt;p&gt;To amuse myself while I wait for the new term to start in a few weeks time, I&amp;rsquo;ve
turned to a very old friend - osdev.&lt;/p&gt;

&lt;p&gt;When I was a teenager I dabbled in Operatng Systems quite a lot. I had some 
great vision of how a new operating system should be, but of course I lacked
both the patience and the knowledge to actually bring it about.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m somewhat older and wiser now, so maybe I&amp;rsquo;ll get a little further than 
printing &amp;ldquo;hello world&amp;rdquo;. At the moment, I&amp;rsquo;m just trying out some ideas in a very
simple kernel or two, but I think I&amp;rsquo;ll sketch out a proper design and go for it.&lt;/p&gt;

&lt;p&gt;Meanwhile, here&amp;rsquo;s a few general osdev resources for anyone interested:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://wiki.osdev.org&quot;&gt;osdev.org wiki&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.osdever.net&quot;&gt;Bona Fide OS Developer&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.nondot.org/sabre/os/articles&quot;&gt;The Operating System Resource Centre&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.acm.uiuc.edu/sigops/roll_your_own/&quot;&gt;How to Write an Operating System&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.brokenthorn.com/Resources/OSDevIndex.html&quot;&gt;BrokenThorn OS Development&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://lmgtfy.com/?q=os+development&quot;&gt;and there are many more out there&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
				<published>2012-09-12 00:00:00 +0100</published>
				<link>http://twrl.github.com/2012/09/operating-system-development/</link>
			</item>
		
			<item>
				<title>Multiple Representations</title>
				<description>&lt;p&gt;Well, I now have an arrangement which provides multiple views of the pages of 
this website. Believe me, that was difficult to achieve.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;d investigated quite a few different Jekyll plugins, and when I couldn&amp;rsquo;t find
one to do what I wanted I investigated quite a few different approaches to
writing Jekyll plugins. But then I realised, I can do what I need far more
simply.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve been thinking about the relationship between resources and their
representations. I wrote recently about the difference an &lt;code&gt;/index.html&lt;/code&gt; makes.
So I just wrote another theme, because I&amp;rsquo;m using a fork of &lt;a href=&quot;https://github.com/josegonzalez/cimino&quot;&gt;Cimino&lt;/a&gt;
and themes are pretty easy, and I merge
files in each view of the site with the command&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rename s/index/mobile/ `find _site -name *.html`
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;before merging the two file trees together. It&amp;rsquo;s perhaps not the most elegant 
solution, but it works surprisingly well.&lt;/p&gt;
</description>
				<published>2012-08-31 00:00:00 +0100</published>
				<link>http://twrl.github.com/2012/08/multiple-representations/</link>
			</item>
		
			<item>
				<title>httpRange-14 and the Dark Resource</title>
				<description>&lt;p&gt;In web parlance, a resource is any identifiable thing. A resource need not have a digital representation, and the representation of a resource may also be a distinct resource in it&amp;rsquo;s own right. There is a whole gamut of issues about resources, possibly the best known is &lt;a href=&quot;http://www.w3.org/2001/tag/issues.html#httpRange-14&quot;&gt;httpRange-14&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;A lot of these questions only become important when you start getting involved with Semantic Web technology. For example, is this properly described as a web page or as a blog post?&lt;/p&gt;

&lt;p&gt;I hold to the convention that &lt;code&gt;http://twrl.github.com/2012/08/httprange-14-and-the-dark-resource/&lt;/code&gt; is distinct from &lt;code&gt;http://twrl.github.com/2012/08/httprange-14-and-the-dark-resource/index.html&lt;/code&gt;. They&amp;rsquo;re related, very much so, but distinct. In particular&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@base &amp;lt;http://twrl.github.com/&amp;gt;
@prefix schema: &amp;lt;http://schema.org/&amp;gt;
@prefix dc: &amp;lt;http://purl.org/dc/terms/&amp;gt;

&amp;lt;/2012/08/httprange-14-and-the-dark-resource&amp;gt; a schema:BlogPost;
	dc:hasFormat &amp;lt;/2012/08/httprange-14-and-the-dark-resource/index.html&amp;gt;.

&amp;lt;/2012/08/httprange-14-and-the-dark-resource/index.html&amp;gt; a schema:WebPage.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From this point of view, there are a lot of &amp;ldquo;missing&amp;rdquo; resources out there - ones which are not described. Taking the view that the abstract resource and it&amp;rsquo;s representation are distinct, people mostly seem to describe only one of the two.&lt;/p&gt;

&lt;p&gt;But why does this matter, you may say. Well, what a person wants to access is the abstract, logical resource. But what they need is it&amp;rsquo;s representation, and given the variety of media through which we can access the web - smartphones, tablets, TVs, etc - they need the right representation. Having the correct semantics makes it possible to identify the best of many possible representations, as well as allowing better indexes.&lt;/p&gt;
</description>
				<published>2012-08-29 00:00:00 +0100</published>
				<link>http://twrl.github.com/2012/08/httprange-14-and-the-dark-resource/</link>
			</item>
		
			<item>
				<title>Static Site Generators</title>
				<description>&lt;p&gt;I&amp;rsquo;m using Jekyll to maintain this site. I first started doing so because it was convenient
to serve from Github pages, but now I run Jekyll locally in order to support customisation
and plugins which I can&amp;rsquo;t have if I run it on Github.&lt;/p&gt;

&lt;p&gt;Jekyll itself is fine. There are a few things which niggle at me, but that would be true
for anything. The joy of using open source software is that you can modify and adapt your
way around anything that you don&amp;rsquo;t like.&lt;/p&gt;

&lt;p&gt;There is an argument that &lt;a href=&quot;http://www.jeremyscheff.com/2011/08/jekyll-and-other-static-site-generators-are-currently-harmful-to-the-free-open-source-software-movement/&quot;&gt;static site generators are harmful&lt;/a&gt; to FOSS. The 
reasoning is that we expect a certain level of dynamic and interactive content - 
commenting, sharing, and so forth - and by using a static generator to maintain a website 
we&amp;rsquo;re also tying ourselves in to third parties and their proprietary infrastructures. For
example, if you scroll down this page, you&amp;rsquo;ll see a Disqus comments box at the bottom.&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t particularly care about that though. I don&amp;rsquo;t share &lt;a href=&quot;http://www.gnu.org/philosophy/who-does-that-server-really-serve.html&quot;&gt;RMS&amp;rsquo; aversion to SaaS&lt;/a&gt;. But I do care about the functionality that I can build on top of the
platform that I&amp;rsquo;m using.&lt;/p&gt;

&lt;p&gt;Jekyll limits me somewhat because it&amp;rsquo;s written in Ruby, which I don&amp;rsquo;t know very well 
(having only started learning it recently) and don&amp;rsquo;t especially like (no curly brackets).
I&amp;rsquo;m sure I&amp;rsquo;ll get used to it, but for the time being I can&amp;rsquo;t easily knock something
together and play with it. I&amp;rsquo;m still at the stage where making quite simple tweaks is a
fairly involved process with lots of to-ing and fro-ing with language guides and API docs.
I may or may not stick with Jekyll in the long run.&lt;/p&gt;

&lt;p&gt;But I&amp;rsquo;ve definitely seen the light when it comes to static site generators. Static content
is easy to host and easy to serve. Yes, I would like to integrate my own dynamic elements
too, but that&amp;rsquo;s a fair way down my list of priorities. What I want is to be able to take 
my data, and churn out a website. And although there&amp;rsquo;s functionality which I can&amp;rsquo;t
implement with Jekyll, that&amp;rsquo;s as much down to my limitations as Jekyll&amp;rsquo;s.&lt;/p&gt;

&lt;p&gt;As client side development has become more and more powerful, the need for server-side
dynamics has diminished. We&amp;rsquo;ve reached a point where only a very small number of services
have to be on a server, and most of those are some kind of database endpoint or security
system. I don&amp;rsquo;t actually need PHP or Node or ASP.Net to generate my pages if I want to host
my own comments - I can do the presentation work on the client - I just need a RESTful 
JSON store with some basic anti-spamming logic.&lt;/p&gt;

&lt;p&gt;Somewhat circuitously, this brings me back to data portability and distributed social
networking. If I can have my RESTful data buckets, I can take responsibility for exposing
their content (or not). I can set aside a bucket or two for the dynamic elements of my
website. &lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s what Jekyll has shown me - I don&amp;rsquo;t need to be dynamic on the server.&lt;/p&gt;
</description>
				<published>2012-08-26 00:00:00 +0100</published>
				<link>http://twrl.github.com/2012/08/static-site-generators/</link>
			</item>
		
			<item>
				<title>Media Centre</title>
				<description>
&lt;p&gt;I had an entertaining time at the weekend setting up &lt;a href=&quot;http://xbmc.org&quot;&gt;XBMC&lt;/a&gt; on my laptop.
It runs well enough on Ubuntu, and compiling the latest source was pretty easy (the 
instructions are pretty good).&lt;/p&gt;

&lt;p&gt;I ran into a few problems. My CPU usage is a little on the high side. My laptop 
being an ageing MacBook, so it&amp;rsquo;s prone to run hot, and unnecessary CPU usage = unnecessary 
fan noise. Getting Suspend and Wake-on-Lan to work reliably was also tricky.&lt;/p&gt;

&lt;h2 id=&quot;cpu-usage&quot;&gt;CPU Usage&lt;/h2&gt;

&lt;p&gt;The first thing to do is enable 
&lt;a href=&quot;http://wiki.xbmc.org/index.php?title=Dirty_regions&quot;&gt;Dirty Regions&lt;/a&gt;. Trial and error will 
tell you which of the available algorithms gives you the best results on you hardware. For
my Macbook (which has an Intel GMA 950 graphics chipset) I found mode 2 worked best, but
YMMV.&lt;/p&gt;

&lt;p&gt;I also recommend disabling RSS feeds on the home screen, and trying a few different skins.
Aeon skins tend to be heavy CPU eaters, although I found Aeon Nox to be better than the
default Confluence skin.&lt;/p&gt;

&lt;h2 id=&quot;suspend-and-wol&quot;&gt;Suspend and WoL&lt;/h2&gt;

&lt;p&gt;I was having an issue with suspend, whether I triggered it from within XBMC or from the 
Unity panel: the computer would enter suspend and then immediately wake itself. 
It never did this if I just closed the lid and left it.&lt;/p&gt;

&lt;p&gt;The solution was to tweak a setting in grub.cfg. Find the line which sets &lt;code&gt;GRUB_CMDLINE_LINUX_DEFAULT&lt;/code&gt;
and add &lt;code&gt;usbcore.autosuspend=-1&lt;/code&gt; to it. So it might read&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GRUB_CMDLINE_LINUX_DEFAULT=&quot;quiet splash usbcore.autosuspend=-1&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or something similar.&lt;/p&gt;

&lt;p&gt;To enable Wake-on-LAN you need to first enable it in the BIOS, if applicable. I didn&amp;rsquo;t have
to - by some quirk of Apple&amp;rsquo;s EFI implementation it seems to be supported anyway.&lt;/p&gt;

&lt;p&gt;I installed ethtool, and enabled WoL on the NIC using the command&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo ethtool -s et0 wol g
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is all documented on the &lt;a href=&quot;https://help.ubuntu.com/community/WakeOnLan&quot;&gt;Ubuntu Community Docs&lt;/a&gt;.
The only trouble is, you have to do this every time the network interface comes up.&lt;/p&gt;

&lt;p&gt;Now, there are all sorts of issues around integration of ethtool and NetworkManager, which
Ubuntu uses by default. I found that the best thing to do was to create a script in 
&lt;code&gt;/etc/NetworkManager/dispatcher.d&lt;/code&gt; to trigger ethtool. &lt;/p&gt;

&lt;p&gt;The dispatcher.d directory contains scripts which are executed every time an interface 
changes state in NetworkManager. I simply created a file called &lt;code&gt;99wol&lt;/code&gt; and put this in it.&lt;/p&gt;

&lt;div&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;directive&quot;&gt;#!/bin/sh&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n2&quot; name=&quot;n2&quot;&gt;2&lt;/a&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n3&quot; name=&quot;n3&quot;&gt;3&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;instance-variable&quot;&gt;IF&lt;/span&gt;=&lt;span class=&quot;predefined-constant&quot;&gt;$1&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n4&quot; name=&quot;n4&quot;&gt;4&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;instance-variable&quot;&gt;STATUS&lt;/span&gt;=&lt;span class=&quot;predefined-constant&quot;&gt;$2&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n5&quot; name=&quot;n5&quot;&gt;5&lt;/a&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n6&quot; name=&quot;n6&quot;&gt;6&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;reserved&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;reserved&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;instance-variable&quot;&gt;$IF&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;eth0&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;reserved&quot;&gt;]&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class=&quot;reserved&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;instance-variable&quot;&gt;$STATUS&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;up&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;reserved&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;reserved&quot;&gt;then&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n7&quot; name=&quot;n7&quot;&gt;7&lt;/a&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n8&quot; name=&quot;n8&quot;&gt;8&lt;/a&gt;&lt;/span&gt;    ethtool -s eth0 wol g
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n9&quot; name=&quot;n9&quot;&gt;9&lt;/a&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;strong&gt;&lt;a href=&quot;#n10&quot; name=&quot;n10&quot;&gt;10&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span class=&quot;reserved&quot;&gt;fi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;There is almost certainly some more sophisticated logic one could employ, but it does the
job I need.&lt;/p&gt;
</description>
				<published>2012-08-14 00:00:00 +0100</published>
				<link>http://twrl.github.com/2012/08/XBMC/</link>
			</item>
		
			<item>
				<title>Microdata vs RDFa</title>
				<description>&lt;p&gt;To my shame, I&amp;rsquo;ve largely ignored the development of microdata until very recently. I&amp;rsquo;ve 
been aware of it going on in the background, but I&amp;rsquo;ve been far more concerned with RDFa
and JSON-LD when it comes to semantics.&lt;/p&gt;

&lt;p&gt;Google told me that they were favouring microdata for semantic markup, so I looked
into it. At first, I was rather taken by it&amp;rsquo;s simplicity. There is much less mucking about
with CURIEs and namespaces than in RDFa.&lt;/p&gt;

&lt;p&gt;Once the novelty wore off however, I started to see the cracks. Microdata is designed very
much to be accessible to designers. RDFa is a more complicated embedding of RDF into HTML,
which means it can encode more complex parts of the graph more succinctly. It also 
lacks many of the ambiguities that microdata can introduce around dereferencing terms.&lt;/p&gt;

&lt;p&gt;Which is not to say that microdata is without it&amp;rsquo;s merits - far from it. Microdata is
a simpler embedding of RDF into HTML, which means it can encode simpler parts of the RDF
graph more succinctly than RDFa can. It&amp;rsquo;s more human-writable, and somewhat simpler to 
parse. &lt;/p&gt;

&lt;p&gt;Both are equally as expressive.&lt;/p&gt;

&lt;p&gt;The new RDFa 1.1 recommendation has absorbed a lot of lessons both from it&amp;rsquo;s predecessor,
and from the development of microdata. RDFa began life as one module in the XHTML2 
development effort, and now stands apart from the development of HTML and XHTML as a 
separate-but-related entity. So there is plenty of room to revise and update RDFa as
technologies and practices change.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m going to stick with RDFa. The reason is simple - I don&amp;rsquo;t want to simply annotate a
few properties here and there, I want to converge semantic, structural and presentational
data. RDFa, which more closely reflects the underlying RDF graph, meshes more easily for
me with other ways of expressing RDF - like RDF/XML and JSON-LD.&lt;/p&gt;
</description>
				<published>2012-08-13 00:00:00 +0100</published>
				<link>http://twrl.github.com/2012/08/microdata-vs-rdfa/</link>
			</item>
		
			<item>
				<title>Copyright</title>
				<description>&lt;p&gt;For the last several months I&amp;rsquo;ve been trying to move away from iTunes as my media library.
Alas, this is a pipe dream, because I have made the mistake in the past of buying movies 
and TV shows through the iTunes store.&lt;/p&gt;

&lt;p&gt;Several years ago, Apple abandoned their ironically named FairPlay DRM software for music
and music videos, however it it still used for movies and TV shows bought through the 
iTunes store. This presents a quandary, because from Apple&amp;rsquo;s point of view they have sold 
me a copyright license to this content, and by doing so through the iTunes store have 
taken steps to ensure I can benefit from this license. However, from my point of view I 
have been sold a good, or at a pinch a service, which has not been consistently rendered -
I am unable to consume media which I have legitimately paid for in the manner that I would
wish.&lt;/p&gt;

&lt;p&gt;Now, I&amp;rsquo;m sure that somewhere in the terms of use of the iTunes store that I clicked
through without reading, I agreed to use iTunes in perpetuity for all my media viewing 
needs, and thus it&amp;rsquo;s my own fault. There is probably some clever legalese in there which
gets around this kind of vendor lock-in being illegal in most jurisdictions of the world
too.&lt;/p&gt;

&lt;p&gt;The fact is that Apple have taken my money and failed to provide in exchange the media for
which it was given in a format acceptable to me. I&amp;rsquo;m sure no actual liability would attach
to Apple for this; legally they should be able to afford to cover their own backsides 
adequately, and anyway they are beholden to the studios and others who license this 
content to them for distribution.&lt;/p&gt;

&lt;p&gt;The immediate lesson for people is: &lt;strong&gt;DO NOT BUY STUFF FROM THE iTunes STORE&lt;/strong&gt;, but I&amp;rsquo;m
sure that&amp;rsquo;s obvious. It does however point to a whole slew of issues to do with the
inadequacies of how we deal with digital content.&lt;/p&gt;

&lt;p&gt;The trouble is that when we purchase some digital content, whether it&amp;rsquo;s music or a video 
or a game or anything else, it exists in a sort of limbo. From the point of view of the 
vendor, it&amp;rsquo;s inevitably seen as a copyright license to be defended. From the point of 
view of the consumer, it&amp;rsquo;s seen as a good to be used.&lt;/p&gt;

&lt;p&gt;If I were a corporation, I could license come intellectual property under contract and be 
held to that contract. However, in the normal course of things I would not expect hourly 
audits, monitoring of my day to day activities, cryptographic measures to prevent me 
viewing the licensed property, or punitive enforcement measures. That we do expect these 
things suggests that we are far outside the scope of normal copyright license agreements. &lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s stop pretending that digital goods are the same as copyright licenses, and equally
let&amp;rsquo;s not pretend that they&amp;rsquo;re the same as something you might pick off a shelf. We have
to admit that digital artefacts are a unique species of thing, and that attempts to 
control them under the old systems are failing. As it stands, there is a strengthening
argument for the total abolition of copyright, and that argument is predicated on the 
excesses of copyright law used to protect digital property. &lt;/p&gt;

&lt;p&gt;There are four major forms of intellectual property rights: copyright, patents, trade
marks, and trade secrets. Each of these, in principle, serves a purpose as sound now as
when Queen Anne enacted the very first copyright statute 300 years ago. When somebody
creates something of worth, in exchange for sharing it with society they gain a temporary
monopoly on making any profit from it.&lt;/p&gt;

&lt;p&gt;And in exchange for buying something, a consumer should gain the right to enjoy it at
their leisure.&lt;/p&gt;

&lt;p&gt;Now, one can argue that copyrights on the order of a century or more are not what anyone
originally had in mind. Perhaps more importantly, one can argue that nobody intended for 
it to become illegal to know &lt;a href=&quot;http://en.wikipedia.org/wiki/Illegal_prime&quot;&gt;certain integers&lt;/a&gt;.
But it&amp;rsquo;s difficult to believe that licensees were supposed to be limited in their
enjoyment of the content that they license. Gutenberg could have made a fortune if he 
had been able to charge extra for the right to read his bibles on Tuesday, or with brown
eyes instead of blue.&lt;/p&gt;

&lt;p&gt;Equally, ownership of a good does not limit what you do with it because you cannot 
duplicate it at negligible cost like you can with computer data. I can&amp;rsquo;t press a button 
and turn one hammer into two, and my friends can&amp;rsquo;t take a look at my hammer and 
automatically gain one of their own. There is a reason why the sale of goods is an 
inadequate model for the sale of digital artefacts, just as copyright licensing is.&lt;/p&gt;

&lt;p&gt;For digital goods copyright laws are not equitable to consumers, and sale of goods laws
are not equitable to vendors. But for too long now copyright vendors have been benefiting
from the excesses that the prevailing copyright model allows them, and it&amp;rsquo;s beginning to
crumble. Unless a new model can be found for digital content, then we can expect copyright
to become hateful and worthless in spite of it&amp;rsquo;s merits.&lt;/p&gt;
</description>
				<published>2012-08-05 00:00:00 +0100</published>
				<link>http://twrl.github.com/2012/08/copyright/</link>
			</item>
		
			<item>
				<title>Is the Public Key Infrastructure Collapsing?</title>
				<description>&lt;p&gt;Back in February, TrustWave hit the news with tales of selling intermediate CA certificates
for use in Man-in-the-Middle traffic interception. TrustWave were redeemed somewhat by
having already revoked the offending certificate before voluntarily disclosing what they
had done.&lt;/p&gt;

&lt;p&gt;For most users, security hinges on SSL/TLS to provide an encrypted connection, and X.509
PKI to provide certificates all the way up to a small number of trusted roots. A large
number will be aware of the terms SSL and certificate from their web browser, but may
not understand what they mean or how they work.&lt;/p&gt;

&lt;p&gt;The TrustWave incident has been a reminder of just how much trust we place in the root CAs.
In theory we have assurances in the form of CSPs and independent audits against those
policies. But it seems that WebTrust, who audit for TrustWave, were not aware of the 
offending intermediate CA certificate. TrustWave have implied strongly that they are not
the only ones to have sold intermediate certificates either. It&amp;rsquo;s difficult to have faith
in the public key infrastructure under such circumstances.&lt;/p&gt;

&lt;p&gt;But add to that, we have the looming 
&lt;a href=&quot;http://wiki.openrightsgroup.org/wiki/Communications_Data_Bill&quot;&gt;Communications Data Bill&lt;/a&gt;
which, amongst other unsavoury things, can be used to mandate Man-in-the-Middle attacks on
TLS sessions - and presumably similar interception of VPN, Tor and other encrypted traffic.
This brings the whole concept of centralised hierarchical trust, which underlies PKI, into 
question. We have no assurance that the entities at the top of the hierarchy are 
trustworthy - in fact, we have good reason to suspect that they may not be.&lt;/p&gt;

&lt;p&gt;The alternative model to PKI is the Web of Trust. This is best known for it&amp;rsquo;s use in PGP.
The main problem with the web of trust is accumulating sufficient endorsement for one&amp;rsquo;s 
certificate to be trusted everywhere. This makes it very difficult to use web of trust for
infrastructure applications. &lt;/p&gt;

&lt;p&gt;In 1992, when Phil Zimmermann first put forward the web of trust as the central concept for
PGP&amp;rsquo;s key management, we didn&amp;rsquo;t have social networks like we do now. The concept of a 
Friend-to-Friend network was very much a niche one. Average Joe user would not be carrying
around the necessary data, and would not know or have remote access to it, to create the
necessary links. Now however, in the day of home servers, smartphones, and web interfaces,
there is no reason why the web of trust should not be reinvigorated as part of the 
distributed social graph. &lt;/p&gt;

&lt;p&gt;Another advantage of this is that it moves the trust policy decision back to the user. As
it stands, the majority of Firefox users trust whomever Mozilla have decided to trust, the
majority of IE users trust whomever Microsoft have decided to trust, and so on. 
Decentralising trust will allow users to make their own decisions about trust metrics,
transitivity, and so on. This entails some user education, but user interaction has come on
a long way in recent years and the concept of implicit and explicit trust shouldn&amp;rsquo;t be too
difficult to grasp, even if the technical details are more tricky.&lt;/p&gt;

&lt;p&gt;Like IPv6 migration, we will likely remain with the existing infrastructure until it 
becomes untenable. Personally, I am no longer comfortable with the centralised nature of 
it, but keeping PKI is better than giving up TLS. &lt;/p&gt;
</description>
				<published>2012-07-17 00:00:00 +0100</published>
				<link>http://twrl.github.com/2012/07/is-the-public-key-infrastructure-collapsing/</link>
			</item>
		
	</channel>
</rss>